Known issues (if ever you don't have a task, come here):
- Angles are correct but systems are inconsistent, some output has +ve as clockwise,
  other output has -ve as clockwise. This needs to be consistent.

- Wind cue label is broken due to wind not having a "world position". This world position
  should be up by 1 and out by 1 (in the wind direction) as that's where the wind vector
  is drawn.

Shelved for now:
- Combined cue strength in polar plots should be limited at 1, otherwise the end of the
  vector is unreadable; this may be a bit of a non-issue however as the meaning is still clear
  and combined strengths of more than 1 should still be displayed in the 3D world.

  Reason: I need to speak to Barbara about this.

23 / 10 / 2019:
Todo:
- For now, focus on bugfixes:
  - Angles are correct but systems are inconsistent, some output has +ve as clockwise,
    other output has -ve as clockwise. This needs to be consistent.


Done:
- Fixed wind labelling: Added a label position parameter and an override method as well as default behaviour.
  The direction looks a little weird but it's readable so I'm not too fussed
Notes:
- Found that no work has been done on Light elevation in the lab. Without any lead on
  light elevation with relation to reliability i turned to stellar performance which
  led to a whiteboard session and much confusion. Their results appear to be contradictory.
- Then again, what did Ramsey say about this??? Ramsey was wrong about this too. He stated they
  do not produce a bimodal distribution, however, the paper states that they DO! Though,
  these results appear inconsistent. Maybe his RV model needs another look.

- Curious problem with the results from stellar performance.

- Think it's outside scope, but I don't take into account cues present in the first roll
  vs cues present in the second. This could be an issue though, so ask.

22 / 10 / 2019:
Todo:
- I should attempt to establish a lower threshold for menotactic capabilities in terms of
  cue vector magnitude: (This brought up issues; I misread that paper).
  - Possible sources:
    - Stellar performance milky way paper
    - anything concerning light elevation (i.e. the multimodal compass paper)

Done:
- Add strength output
- Add the cue direction given by each vector (strength projected onto the ground)

Notes:
- Haven't implemented weighting yet; this will also need a change to the config format yet again.
  - I think I should have show-weighted-geometry, but then I have an issue in that the beetle is where the
    weighting is applied and a beetle isn't a Cue. I.e. I need to define add_weighted_whatever to the beetle drawing
    code.
  - I think I should also have an option to show weighted individual cues.
- Could also do a test scenario: arrange the lights as in the Milky Way tests and see if the cue output is what you
  expect.
21 / 10 / 2019:
Todo:

Done:
- Fixed 2D plotting
- Ability to configure additional output for labels, geometry, individual cues has been added
- Beetle strategy configuration has been added.
- Added the configuration module which stores things for use at runtime.
- Add label capability for cues
  (Labels can be enabled in the config file and now they will be output)

Notes:
- On a broader level what configs do I need?
  - Label elements (wind-1, light-1 or whatever)
  - Geometry (the vectors used to compute the cue location)
  - Individual cue directional prompts (where is each cue telling you to go)
  - Beetle (only need to configure the strategy)
- Also, should configs all be stored centrally? In definitions for example?
  - Then I could import it into "cue" and use this to add some stuff???
  - In any case I think this requires a fair bit of plumbing.
- Label direction could be better I think. I'll leave it as is for now.
17 / 10 / 2019:
Todo:
- Beetle.add_to_2D method for the 2D plots.

16 / 10 / 2019:
Todo:
- Add 2D top-down plots:
  - Plots added, now need an add_to_2D which is analagous to add_to_world but for
    the 2D plots. The only things that need to go on this plot are the beetle paths and
    cue directions.
Notes:
- Cue names need to be added, cue just needs a name field which can be read from the
  pyyaml file.

Done:
- Make beetle go relative to a combined cue as opposed to following the cue directly
11 / 10 / 2019:
Todo:
- Logic implementation:
  - The cues will all break down to a single vector:
    - This means that it's probably easiest just to have the beetle
      always travel in that direction.
    - Whenever the combined cue-vector changes the beetle's direction changes
  - Current solution is to have the beetle go towards its combined cue vector.
    Creating a new beetle should allow you to track the change. This is a bad solution.
Notes:
- Yesterday spent trying to get some slides together, no code written
- Congrats, you can add vectors together and do first year maths. Now you need to be able
  to average them and project the response onto the ground


09 / 10 / 2019:
Todo:
- Logic for behaviour
  - This can go in the beetle class. Pass it a list of cues and a strategy, it
    does the rest and updates its direction appropriately (or define a new vector
    with something like self.__newdirection)

Done:
- Add beetle entity and directional vector(s)?
- Input at least for the cues required imminently is done using YAML. Makes
  deserialisation reasonably straightforward and the file is human-friendly too.
- Set default view to be a little more helpful. Still having doubts over visualisation

Notes:
- Hmm, I know where behaviour should go, but I don't know quite how to break it down.
  - I had two strategies in mind. Winner-take-all and vector summation. The former is
    unrealistic I think, but easy enough to implement.
  - Know that if the beetle receives even-strength cues (e.g. two light sources) then
    it can't orient.
  - Could simply take the azimuthal difference of the resultant cue vector (by whatever
    strategy) from the beetle's vector (unit vector along x-axis) as the bearing.
08 / 10 / 2019:
Todo:
Done:
(Did nothing this day, working on write-up)


07 / 10 / 2019:
Todo:
- (semi-done) Add debug view of each cue's actual vector.

Done:
- Rewrite Cues to use elevation and azimuth as per convention
  - Should entities use this convention too? Decided not as entities don't really
    need to be configurable in the same way
- Add strength to Cues but keep it separate from the underlying Vec3
- Added a Wind cue along with code to draw it in the plot. I'm not happy with how this
  all looks but it's more important that it's functional at the moment.

Notes:
- The angular stuff could be solved by leaving Vec3 as it should be, then setting cues
  to use elevation and azimuth according to the conventions used by the paper.
- For strength, could a Cue always be a unit vector, then the magnitude parameter is applied
  to the underlying vector for all calculations.
- I think the separation is between world descriptions and geometric descriptions.
- Realised I'm dumb and I used the physics convention for naming in spherical coordinate systems. This cost me
  40 minutes of debugging.
- I should add exceptions for the azimuthal and elevation positions. Azimuth shouldn't go past +-180 (and they should
  be equivalent). Elevation shouldn't go past 90 or be less than 0. I guess internally having stupid azimuths shouldn't
  cause a difference in behaviour but it makes usage easier.
- Wind.add_to_world will require some messing around. In the world i think this should
  be a vector pointing inward to the edge of the world, what about internally? I think
  I'm conflating drawing on the world and internal representation again. No this one is
  a bit more tricky. If the wind direction is 180deg then the position should be zero surely?

  I can also just say the wind has an azimuthal position and the direction is always
  pointing into the centre. I.e. the position of the cue determines the direction. But again
  the point of confusion is that the vector which determines the position is pointing in
  the opposite direction to that which should determine the cue direction; I'm not sure
  this really matters now that I think about it.

- I think it would also be good to add a debug visualisation step which
  shows the actual vectors for each cue.
- Feeling stressed but the visualisation should all be in place and the basic geometric
  stuff should be straightforward.

04 / 10 / 2019:

Notes:
- Have basic world representation stuff in place
- Angles are messed up though. Spherical coordinates work perfectly but theta isn't
  really elevation, it's pi/2 - elevation.
  - Not really sure how to deal with this as converting back and forth could prove
    a problem.
- Also ran into problems with the representation of cues versus their strength.
  Internally, the strength is the vector magnitude but for visualisation the
  magnitude must be a unit vector (at least for lights).

- MUST REMEMBER TO PROVIDE SETUP INSTRUCTIONS, this thing will be useless if
  it only runs on my machine.

Suggestions from meeting with Barbara:
- Doing things using basic vector geometry seems to be appropriate.
- Show the response for all cues present and then a combined response. This might
  be a much more practical way of solving the "strength" problem. We can see what would happen
  if all cues were weighted equally of if each was present alone.
- Add some noise to the signal, I understand the value in this but not really how to do it.
  The idea is to generate a distribution of responses which could model a population rather
  than generating a mean response. This was suggested as an additional requirement and not
  something to worry about immediately.

